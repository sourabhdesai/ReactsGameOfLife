{"version":3,"sources":["Cell.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","state","isAlive","onCellClick","this","setState","onClick","className","Component","Game","boardWidth","boardHeight","iterationSleep","heightPerRow","_","round","widthPerCol","gridStates","times","Math","random","setTimeout","updateGridStates","bind","newGridStates","rowIdx","colIdx","northRowIdx","wrapHeight","southRowIdx","eastColIdx","wrapWidth","westColIdx","neighbors","numLiveNeighbors","sum","Number","console","log","wrapIndex","idx","length","flatten","style","display","gridRowStart","gridRowEnd","gridColumnStart","gridColumnEnd","key","height","width","generateRows","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1938fe7c.chunk.js","sourcesContent":["import React from 'react';\nimport {Component} from 'react';\nimport './Cell.css';\n\nclass Cell extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isAlive: props.isAlive};\n        this.onCellClick = props.onCellClick;\n    }\n\n    componentWillReceiveProps({isAlive}) {\n        this.setState({isAlive: isAlive});\n    }\n\n    render() {\n        return <div onClick={this.onCellClick} className={`game-cell ${this.state.isAlive ? 'alive' : 'dead'}`}></div>;\n    }\n}\n\nexport default Cell;\n","import React from 'react';\nimport {Component} from 'react';\nimport Cell from './Cell';\nimport _ from 'lodash';\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n        const {boardWidth, boardHeight, iterationSleep} = props;\n        this.state = {\n            boardWidth, boardHeight, iterationSleep,\n            heightPerRow: _.round((1 / boardWidth) * 100, 2),\n            widthPerCol: _.round((1 / boardHeight) * 100, 2),\n            gridStates: _.times(boardHeight, () => _.times(boardWidth, () => Math.round(Math.random())))\n        };\n\n        setTimeout(this.updateGridStates.bind(this), iterationSleep);\n    }\n\n    /**\n     * Game rules from here:\n     * https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\n     */\n    updateGridStates() {\n        const newGridStates = _.times(this.state.boardHeight, (rowIdx) => {\n            return _.times(this.state.boardWidth, (colIdx) => {\n                const northRowIdx = this.wrapHeight(rowIdx - 1);\n                const southRowIdx = this.wrapHeight(rowIdx + 1);\n                const eastColIdx = this.wrapWidth(colIdx + 1);\n                const westColIdx = this.wrapWidth(colIdx - 1);\n                const neighbors = [\n                    // North\n                    this.state.gridStates[northRowIdx][colIdx],\n                    // North-east\n                    this.state.gridStates[northRowIdx][eastColIdx],\n                    // North-west\n                    this.state.gridStates[northRowIdx][westColIdx],\n                    // South\n                    this.state.gridStates[southRowIdx][colIdx],\n                    // South-east\n                    this.state.gridStates[southRowIdx][eastColIdx],\n                    // South-west\n                    this.state.gridStates[southRowIdx][westColIdx],\n                    // East\n                    this.state.gridStates[rowIdx][eastColIdx],\n                    // West\n                    this.state.gridStates[rowIdx][westColIdx]\n                ];\n                const numLiveNeighbors = _.sum(neighbors);\n                const isAlive = this.state.gridStates[rowIdx][colIdx];\n                const nextLife = isAlive ? numLiveNeighbors === 2 || numLiveNeighbors === 3 : numLiveNeighbors === 3;\n                return Number(nextLife);\n            });\n        });\n        this.setState({gridStates: newGridStates}, () => {\n            console.log('updated state');\n            setTimeout(this.updateGridStates.bind(this), this.state.iterationSleep);\n        });\n    }\n\n    wrapHeight(rowIdx) {\n        return this.wrapIndex(rowIdx, this.state.boardHeight);\n    }\n\n    wrapWidth(colIdx) {\n        return this.wrapIndex(colIdx, this.state.boardWidth);\n    }\n\n    wrapIndex(idx, length) {\n        idx = idx % length;\n        return idx >= 0 ? idx : length + idx;\n    }\n\n    onCellClick(rowIdx, colIdx) {\n        this.state.gridStates[rowIdx][colIdx] = !this.state.gridStates[rowIdx][colIdx];\n        this.setState({gridStates: this.state.gridStates});\n    }\n\n    generateRows() {\n        return _.flatten(_.times(this.state.boardHeight, (rowIdx) => {\n            return _.times(this.state.boardWidth, (colIdx) => {\n                const style = {\n                    display: 'inline-grid',\n                    gridRowStart: rowIdx,\n                    gridRowEnd: rowIdx + 1,\n                    gridColumnStart: colIdx,\n                    gridColumnEnd: colIdx + 1,\n                };\n                return (\n                    <div style={style} key={`${rowIdx}-${colIdx}`} onClick={() => this.onCellClick(rowIdx, colIdx)}>\n                        <Cell isAlive={this.state.gridStates[rowIdx][colIdx]} />\n                    </div>\n                );\n            });\n        }));\n    }\n\n    render() {\n        const style = {height: '100vh', width: '100vw', display: 'grid'};\n        return (\n            <div style={style}>\n                {this.generateRows()}\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game boardWidth={75} boardHeight={75} iterationSleep={1000} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}